#!/bin/bash
for v in "$@"
do
    if [ $v == "-bytecode" ]; then
	BYTECODE="1"
    else
	if [ ${v:0:12} == "-qeditasdir=" ]; then
            INSTALLDIR=${v:12}
	    if [ ! -d $INSTALLDIR ]; then
		echo "$INSTALLDIR is not a directory"
	    fi
	else
	    if [ ${v:0:9} == "-datadir=" ]; then
		DATADIR=${v:9}
	    else
		if [ ${v:0:9} == "-leveldb=" ]; then
		    LEVELDB=${v:9}
		else
		    if [ ${v:0:14} == "-ocamlinclude=" ]; then
			OCAMLINCLUDE=${v:14}
		    else
			echo "Unknown command line argument $v"
			echo "configure can be given the following arguments:"
			echo "-bytecode (to only build bytecode)"
			echo "-qeditasdir=<dir> (to specify the install directory)"
			echo "-datadir=<dir> (to specify the default directory for Qeditas data)"
			echo "-leveldb=<dir> (to specify the location of the leveldb library)"
			echo "-ocamlinclude=<dir> (to specify the location of the ocaml library for interfacing with C/C++)"
			exit 1
		    fi
		fi
	    fi
	fi
    fi
done
if [ ! $DATADIR ]; then
    DATADIR=$HOME/.qeditas
fi
if [ ! -d $DATADIR ]; then
    echo "$DATADIR is not a directory; create it first or give an existing directory with -datadir=<dir>"
fi
if [ ! -d $DATADIR/testnet ]; then
  mkdir $DATADIR/testnet
fi
echo let datadir = ref \"$DATADIR\" > src/config.ml
echo let testnet = ref false >> src/config.ml
echo let staking = ref false >> src/config.ml
echo let ip = ref None >> src/config.ml
echo let ipv6 = ref false >> src/config.ml
echo let port = ref 20805 >> src/config.ml
echo let socks = ref None >> src/config.ml
echo let socksport = ref 9050 >> src/config.ml
echo let maxconns = ref 200 >> src/config.ml
echo let seed = ref \"\" >> src/config.ml
echo let lastcheckpoint = ref \"\" >> src/config.ml
echo let currledgerroot = ref \"a47da9044687cc40e368fbd60f404ad5b4ddd4cf\" >> src/config.ml
echo let ctreedatadir = ref \"/tmp/deprecated\" >> src/config.ml
echo let chaindatadir = ref \"/tmp/deprecated\" >> src/config.ml
echo let prompt = ref \"\> \" >> src/config.ml
if [ $BYTECODE ]; then
    if [ $INSTALLDIR ]; then
	echo "bytecode cannot be installed"
	echo "configure failed"
	exit 1
    fi
fi
GCC=`which g++`
if [ -z $GCC ]; then
    echo 'Could not find g++'
    echo 'configure failed'
    exit 1
fi
OCAMLMKLIB=`which ocamlmklib`
if [ -z $OCAMLMKLIB ]; then
    echo 'Could not find ocamlmklib'
    echo 'configure failed'
    exit 1
fi
OCAMLC=`which ocamlc`
if [ -z $OCAMLC ]; then
    echo 'Could not find ocamlc'
    echo 'configure failed'
    exit 1
fi
echo OCAMLC=$OCAMLC > Makefile
if [ $LEVELDB ]; then
    echo LEVELDB=$LEVELDB >> Makefile
fi
if [ $OCAMLINCLUDE ]; then
    echo OCAMLINCLUDE=$OCAMLINCLUDE >> Makefile
fi
echo OCAMLMKLIB=$OCAMLMKLIB >> Makefile
echo GCC=$GCC >> Makefile
if [ $BYTECODE ]; then
    echo 'all: bytecode' >> Makefile
else
    OCAMLOPT=`which ocamlopt`
    if [ -z $OCAMLOPT ]; then
	echo 'Could not find ocamlopt'
	echo 'Only the bytecode will be created'
	BYTECODE=1
	INSTALLDIR=""
	echo 'all: bytecode' >> Makefile
    else
	echo OCAMLOPT=$OCAMLOPT >> Makefile
	echo 'all: bytecode' >> Makefile
    fi
fi
cat Makefile.in >> Makefile
if [ -z $INSTALLDIR ]; then
    if [ -d /usr/local/bin ]; then
	INSTALLDIR="/usr/local/bin"
    else
	if [ -d /usr/bin ]; then
	    INSTALLDIR="/usr/bin"
	else
	    echo 'No installation directory could be determined'
	    echo 'make install cannot be run'
	    echo 'To resolve this give -qeditasdir=<dir> as an argument to configure.'
	fi
    fi
fi
if [ -n $INSTALLDIR ]; then
    echo INSTALLDIR=$INSTALLDIR >> Makefile
    echo '' >> Makefile
    echo 'install:' >> Makefile
    echo -e '\tcp bin/qeditas $(INSTALLDIR)' >> Makefile
fi
